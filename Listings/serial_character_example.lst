C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SERIAL_CHARACTER_EXAMPLE
OBJECT MODULE PLACED IN .\Objects\serial_character_example.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE serial_character_example.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\serial_character_example.lst) TABS(2) OBJECT(.\Objects\serial_character_example.obj)

line level    source

   1          #include <at89x52.h>
   2          #include <string.h>
   3          #include <math.h>
   4          
   5          #define DAC P0
   6          #define LCD P2
   7          #define EN P3_7 // LCD enable
   8          #define RS P3_6 // LCD instruction or dataa
   9          
  10          // Prototipos das fun??es
  11          void playComposer();
  12          
  13          void reset();
  14          void nop();
  15          
  16          void timer_config();
  17          void serial_config();
  18          void LCD_config();
  19          void INT_config(); // Configura interrup??es
  20          
  21          void aponta_line1(); // Linha 1 do LCD
  22          void aponta_line2();
  23          void write_lcd_string(char *str);
  24          void WR_CMD();
  25          void WR_CHAR();
  26          
  27          void isr_serial(void); // Interruption
  28          
  29          void delay_notes(unsigned char index);
  30          void delay_us(int us);
  31          void delay_ms(int ms);
  32          
  33          void play_period_note(unsigned char index);
  34          void play_note(unsigned char note, unsigned int ms);
  35          
  36          // Variaveis globais
  37          char notes[40];
  38          char char_temp;
  39          int state = 0;
  40          unsigned int count = 0;
  41          unsigned int countNotes = 0;
  42          
  43          // char MSG1[] = "Welcome...";
  44          const char code MSG2[] = "Choose mode...";
  45          const char code MSG3[] = "1 Piano 2 Compos";
  46          const char code MSG4[] = "-- PIANO MODE --";
  47          const char code MSG5[] = " Play any key ";
  48          const char code MSG6[] = "COMPOSER MODE";
  49          const char code MSG7[] = "Enter with notes and its time";
  50          const unsigned char code f_Htimer[] = {
  51            0xc4, 0xca, 0xd0, 0xd3, 0xd8, 0xdc, 0xe0, 0xe2, 0xe5, 0xe8, 0xe9, 0xec, 0xee, 0xf0, 0xf1, 0xf2, 0xf4, 0xf
             -4, 0xf6, 0xf7, 0xf8, 0xf8, 0xf9, 0xfa, 0xfa, 0xfb, 0xfb, 0xfc, 0xfc};
  52          const unsigned char code f_Ltimer[] = {
  53            0x45, 0xcc, 0x98, 0x41, 0x24, 0x7d, 0x5e, 0x24, 0x66, 0x4d, 0xa1, 0x12, 0x3f, 0x2e, 0x12, 0xb3, 0x26, 0xd
C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 2   

             -0, 0x09, 0x1f, 0x17, 0x89, 0x59, 0x13, 0x68, 0x04, 0x90, 0x0c, 0x44};
  54          const unsigned char code reps_notes[] = {
  55            35, 40, 45, 47, 53, 60, 67, 71, 80, 89, 95, 106, 119, 134, 142, 159, 179, 189, 213, 239, 268, 284, 319, 3
             -58, 379, 425, 477, 536, 568
  56          };
  57          
  58          // Funcao principal
  59          void main(void){
  60   1      
  61   1        timer_config();
  62   1        serial_config();
  63   1        LCD_config();
  64   1        aponta_line1();
  65   1        write_lcd_string(MSG2);
  66   1        aponta_line2();
  67   1        write_lcd_string(MSG3);
  68   1        INT_config();
  69   1      
  70   1        while (1){
  71   2          // Entra em loop, esperando interrupcoes
  72   2          /*if (state == 3)
  73   2          {
  74   2      
  75   2            playComposer();
  76   2          }*/
  77   2        }
  78   1      }
  79          
  80          void play_period_note(unsigned char index){
  81   1      
  82   1        DAC = 0;
  83   1        delay_notes(index);
  84   1        DAC = 255;
  85   1        delay_notes(index);
  86   1      }
  87          
  88          void play_note(unsigned char note, unsigned int ms){
  89   1      
  90   1        int note_number = -1;
  91   1        if (note == 'q'){
  92   2          note_number = 0;
  93   2        }
  94   1        else if (note == 'w'){
  95   2          note_number = 1;
  96   2        }
  97   1        else if (note == 'e'){
  98   2          note_number = 2;
  99   2        }
 100   1        else if (note == 'r'){
 101   2          note_number = 3;
 102   2        }
 103   1        else if (note == 't'){
 104   2          note_number = 4;
 105   2        }
 106   1        else if (note == 'y'){
 107   2          note_number = 5;
 108   2        }
 109   1        else if (note == 'u'){
 110   2          note_number = 6;
 111   2        }
 112   1        else if (note == 'i'){
 113   2          note_number = 7;
C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 3   

 114   2        }
 115   1        else if (note == 'o'){
 116   2          note_number = 8;
 117   2        }
 118   1        else if (note == 'p'){
 119   2          note_number = 9;
 120   2        }
 121   1        else if (note == 'a'){
 122   2          note_number = 10;
 123   2        }
 124   1        else if (note == 's'){
 125   2          note_number = 11;
 126   2        }
 127   1        else if (note == 'd'){
 128   2          note_number = 12;
 129   2        }
 130   1        else if (note == 'f'){
 131   2          note_number = 13;
 132   2        }
 133   1        else if (note == 'g'){
 134   2          note_number = 14;
 135   2        }
 136   1        else if (note == 'h'){
 137   2          note_number = 15;
 138   2        }
 139   1        else if (note == 'j'){
 140   2          note_number = 16;
 141   2        }
 142   1        else if (note == 'k'){
 143   2          note_number = 17;
 144   2        }
 145   1        else if (note == 'l'){
 146   2          note_number = 18;
 147   2        }
 148   1        else if (note == 199){
 149   2          note_number = 19;
 150   2        }
 151   1        else if (note == 'z'){
 152   2          note_number = 20;
 153   2        }
 154   1        else if (note == 'x'){
 155   2          note_number = 21;
 156   2        }
 157   1        else if (note == 'c'){
 158   2          note_number = 22;
 159   2        }
 160   1        else if (note == 'v'){
 161   2          note_number = 23;
 162   2        }
 163   1        else if (note == 'b'){
 164   2          note_number = 24;
 165   2        }
 166   1        else if (note == 'n'){
 167   2          note_number = 25;
 168   2        }
 169   1        else if (note == 'm'){
 170   2          note_number = 26;
 171   2        }
 172   1        else if (note == ','){
 173   2          note_number = 27;
 174   2        }
 175   1        else if (note == '.'){
C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 4   

 176   2          note_number = 28;
 177   2        }
 178   1        else{}
 179   1      
 180   1        if (note_number >= 0){
 181   2          unsigned int temp;
 182   2          for (temp = reps_notes[note_number]; temp > 0; --temp){
 183   3            play_period_note(note_number);
 184   3          }
 185   2        }
 186   1      }
*** WARNING C280 IN LINE 88 OF serial_character_example.c: 'ms': unreferenced local variable
 187          
 188          void aponta_line1(){
 189   1      
 190   1        LCD = 0x01; // Limpa o display.
 191   1        WR_CMD();
 192   1        LCD = 0x80; // Cursor para a primeira linha
 193   1        WR_CMD();
 194   1      }
 195          
 196          void aponta_line2(){
 197   1      
 198   1        LCD = 0xC0; // Cursor para a segunda linha
 199   1        WR_CMD();
 200   1        LCD = 0x0F; // Cursor Piscando
 201   1        WR_CMD();
 202   1      }
 203          
 204          void WR_CMD(){
 205   1      
 206   1        RS = 0;
 207   1        nop();
 208   1        EN = 1;
 209   1        delay_us(5);
 210   1        EN = 0;
 211   1        delay_ms(5);
 212   1      }
 213          
 214          void WR_CHAR(){
 215   1      
 216   1        RS = 1;
 217   1        nop();
 218   1        EN = 1;
 219   1        delay_us(5);
 220   1        EN = 0;
 221   1        delay_ms(150);
 222   1      }
 223          
 224          // Funcao para escrever uma string na LCD
 225          void write_lcd_string(char *str){
 226   1      
 227   1        count = 0;
 228   1        while (*str){
 229   2          LCD = (unsigned char)*str++;
 230   2          WR_CHAR();
 231   2          count++;
 232   2          if (count == 16){ // Liga o scroll
 233   3            LCD = 0x07;
 234   3            WR_CMD();
 235   3          }
 236   2        }
C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 5   

 237   1        LCD = 0x06; // Deslocamento do cursor E->D.
 238   1        WR_CMD();
 239   1      }
 240          
 241          // Funcao para atender a interrupcao serial
 242          void isr_serial(void) interrupt 4 { 
 243   1        
 244   1        char_temp = SBUF;
 245   1        
 246   1        if (state == 1){ // Piano mode
 247   2      
 248   2          if (char_temp == 27){
 249   3            reset();
 250   3          }
 251   2          play_note(char_temp, 1000);
 252   2        }
 253   1        else if (state == 2){ // Composer mode
 254   2      
 255   2          if (char_temp == 27){
 256   3            reset();
 257   3          }
 258   2          else if (countNotes == 40 || char_temp == 13){
 259   3            playComposer();
 260   3            countNotes = 0;
 261   3            state = 3;
 262   3          }
 263   2          else{
 264   3            notes[countNotes] = char_temp;
 265   3            countNotes++;
 266   3          }
 267   2        }
 268   1        else{ // Menu mode
 269   2      
 270   2          if (char_temp == '1'){
 271   3      
 272   3            aponta_line1();
 273   3            write_lcd_string(MSG4);
 274   3            aponta_line2();
 275   3            write_lcd_string(MSG5);
 276   3            state = 1;
 277   3          }
 278   2          else if (char_temp == '2'){
 279   3            aponta_line1();
 280   3            write_lcd_string(MSG6);
 281   3            aponta_line2();
 282   3            write_lcd_string(MSG7);
 283   3            aponta_line1();
 284   3            write_lcd_string(MSG6);
 285   3            state = 2;
 286   3          }
 287   2          else{
 288   3            aponta_line1();
 289   3            write_lcd_string(MSG6);
 290   3            aponta_line2();
 291   3            write_lcd_string(MSG7);
 292   3            state = 2;
 293   3          }
 294   2        }
 295   1        RI = 0; // Limpa a flag de interrupcao serial
 296   1      }
 297          
 298          void playComposer(){
C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 6   

 299   1        char *str = notes;
 300   1        char note;
 301   1        char time;
 302   1      
 303   1        //IE = 0x00; // Desliga interrup��o serial
 304   1      
 305   1        while (*str){
 306   2          note = *str++;
 307   2          time = *str++;
 308   2          play_note(note, time);
 309   2        }
 310   1        state = 0;
 311   1        //IE = 0x90; // Liga interrup��o serial
 312   1      }
 313          
 314          //---------------------------- Configura ----------------------------------------------------
 315          
 316          void timer_config(){
 317   1        TMOD = 0x20; // Configura T/C 1 em modo 8 bits com recarga.
 318   1        TH1 = 253;
 319   1        TL1 = 253;
 320   1        TR1 = 1;
 321   1      }
 322          
 323          void reset(){
 324   1        count = 0;
 325   1        LCD_config();
 326   1        aponta_line1();
 327   1        write_lcd_string(MSG2);
 328   1        aponta_line2();
 329   1        write_lcd_string(MSG3);
 330   1        state = 0;
 331   1      }
 332          
 333          void serial_config(){
 334   1        PCON = 0x80; // SMOD = 1.
 335   1        SCON = 0x50; // Modo 1, recep??o habilitada (REN = 1).
 336   1      }
 337          
 338          void LCD_config(){
 339   1        LCD = 0x38; // Define a matriz 5x7 pontos.
 340   1        WR_CMD();
 341   1        LCD = 0x06; // Deslocamento do cursor E->D.
 342   1        WR_CMD();
 343   1        LCD = 0x0E; // Cursor fixo.
 344   1        WR_CMD();
 345   1        LCD = 0x01; // Limpa o display.
 346   1        WR_CMD();
 347   1        LCD = 0x02; // Vai para a primeira linha (opcional).
 348   1        WR_CMD();
 349   1      }
 350          
 351          void INT_config(){
 352   1        IE = 0x90;
 353   1      }
 354          
 355          // ---------------------- Delays ---------------------------
 356          
 357          void delay_notes(unsigned char index){
 358   1        TMOD = 0x01;
 359   1        TH0 = f_Htimer[index];
 360   1        TL0 = f_Ltimer[index];
C51 COMPILER V9.60.7.0   SERIAL_CHARACTER_EXAMPLE                                          09/12/2023 22:32:58 PAGE 7   

 361   1        TR0 = 1;
 362   1        while (!TF0);
 363   1        TF0 = 0;
 364   1        TR0 = 0;
 365   1      }
 366          
 367          void delay_ms(int ms){
 368   1        TMOD |= 0x01;
 369   1        while (ms){
 370   2          TL0 = 0x65;
 371   2          TH0 = 0xFC;
 372   2          TR0 = 1;
 373   2          while (!TF0);
 374   2          TF0 = 0;
 375   2          TR0 = 0;
 376   2          ms--;
 377   2        }
 378   1      }
 379          
 380          void delay_us(int us){
 381   1        int i;
 382   1        for(i = 0; i < us; ++i){
 383   2        }
 384   1      }
 385          
 386          void nop(){}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1086    ----
   CONSTANT SIZE    =    195    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
